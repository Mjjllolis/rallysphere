// Firestore Security Rules
// Copy these rules to Firebase Console → Firestore Database → Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own profile
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Clubs rules
    match /clubs/{clubId} {
      // Anyone can read public clubs
      allow read: if resource.data.isPublic == true;
      // Members can read private clubs (check both clubMembers and members for backwards compatibility)
      allow read: if request.auth != null &&
        (request.auth.uid in resource.data.get('clubMembers', []) ||
         request.auth.uid in resource.data.get('members', []));
      // Only authenticated users can create clubs
      allow create: if request.auth != null &&
        (request.auth.uid == request.resource.data.createdBy ||
         request.auth.uid == request.resource.data.clubOwner);
      // Only admins can update clubs (check both clubAdmins and admins)
      allow update: if request.auth != null &&
        (request.auth.uid in resource.data.get('clubAdmins', []) ||
         request.auth.uid in resource.data.get('admins', []));
      // Only admins can delete clubs
      allow delete: if request.auth != null &&
        (request.auth.uid in resource.data.get('clubAdmins', []) ||
         request.auth.uid in resource.data.get('admins', []));
    }
    
    // Events rules
    match /events/{eventId} {
      // Anyone can read public events
      allow read: if resource.data.isPublic == true;
      // Club members can read private events
      allow read: if request.auth != null;
      // Only authenticated users can create events
      allow create: if request.auth != null && request.auth.uid == request.resource.data.createdBy;
      // Only event creator and club admins can update events
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.createdBy);
      // Only event creator and club admins can delete events
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.createdBy);
    }
    
    // Featured events - read-only for all authenticated users
    match /featuredEvents/{featuredId} {
      // Anyone authenticated can read featured events
      allow read: if request.auth != null;
      // Only authenticated users can create featured events
      allow create: if request.auth != null && request.auth.uid == request.resource.data.createdBy;
      // Only creator can update/delete
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.createdBy;
    }

    // Payments - users can only read their own payments
    match /payments/{paymentId} {
      // Users can read their own payments
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      // Only server (Firebase Functions) can write payments
      allow write: if false;
    }

    // Club join requests
    match /clubJoinRequests/{requestId} {
      // Users can read their own requests
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      // Club admins can read requests for their clubs
      allow read: if request.auth != null &&
        exists(/databases/$(database)/documents/clubs/$(resource.data.clubId)) &&
        (request.auth.uid in get(/databases/$(database)/documents/clubs/$(resource.data.clubId)).data.get('clubAdmins', []) ||
         request.auth.uid in get(/databases/$(database)/documents/clubs/$(resource.data.clubId)).data.get('admins', []));
      // Users can create join requests
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      // Club admins can update requests (approve/reject)
      allow update: if request.auth != null &&
        exists(/databases/$(database)/documents/clubs/$(resource.data.clubId)) &&
        (request.auth.uid in get(/databases/$(database)/documents/clubs/$(resource.data.clubId)).data.get('clubAdmins', []) ||
         request.auth.uid in get(/databases/$(database)/documents/clubs/$(resource.data.clubId)).data.get('admins', []));
    }
  }
}
